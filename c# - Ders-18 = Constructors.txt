static void Main(string[] args)
        {
            CustomerManager customerManager = new CustomerManager();		-->> parantez içine bir şey yazılmaz ise aşağıdaki _count =15 çalışır.
            customerManager.List();						-->> çünkü başlangıç değeri olarak 15 atadık.

            Product product = new Product { Id = 1, Name = "Laptop" };
            Product product2 = new Product(2,"Computer");

 	    EmployeeManager employeeManager = new EmployeeManager(new DatabaseLogger());    -->> pratik bir yöntemdir "new FileLogger()" şeklinde de File ı verir.
            employeeManager.Add();

	    PersonManager personManager = new PersonManager("Product");
            personManager.Add();

	    //STATİC CLASS//    
            Teacher.Number = 10;

	    Utilities.Validate();					-->> static olmasını istediğimiz zaman bu şekilde çağırabiliyoruz.
 	    
	    Manager.DoSomething();				-->> normal bir classın içindeki "public static void DoSomething()" şeklindeki sınıfı static olduğundan bu şekilde çağırırız.
	    
	    Manager manager = new Manager();			-->> static olmadığında ise bu şekilde çağırırız.
            manager.DoSomething2();



            Console.ReadLine();
        }
    }
    class CustomerManager
    {
        private int _count=15;				-->> fakat "new CustomerManager();" parantez içine "23" gibi bi değer atasaydık onu yazardı.!	
        public CustomerManager(int count)			-->> ctor yazıp "tab" a iki kere basınca construct halini alır..!
        {
            _count = count;
        }
        public void List()
        {
            Console.WriteLine("Listed {0} items",_count);
        }
        public void Add()
        {
            Console.WriteLine("Added!");
        }
    }


class Product
    {
        public Product()
        {

        }
        private int _Id;
        private string _Name;
        public Product(int id, string name)
        {
            _Id = id;
            _Name = name; 
        }
        public int Id { get; set; }
        public string Name { get; set; }
    }

interface ILogger
    {
        void Log();
    }
    class DatabaseLogger : ILogger
    {
        public void Log()
        {
            Console.WriteLine("Logged to database");
        }
    }
    class FileLogger : ILogger
    {
        public void Log()
        {
            Console.WriteLine("Filed to database");
        }
    }
    class EmployeeManager
    {
        private ILogger _logger;
        public EmployeeManager(ILogger logger)
        {
            _logger = logger;
        }
        public void Add()
        {
            _logger.Log();
            Console.WriteLine("Added!");
        }
    }

class BaseClass
    {
        private string _entity;
        public BaseClass(string entity)
        {
            _entity = entity;
        }
        public void Message()
        {
            Console.WriteLine("{0} message",_entity);
        }
    }
    class PersonManager:BaseClass
    {
        public PersonManager(string entity):base(entity)		-->> base sınıfına değer göndermek istiyorsak..
        {								-->> şuanda yalnızca base sınıfı için kullanılıyor

        }
	public void Add()
        {
            Console.WriteLine("Added!");
            Message();							-->> bu classı ":BaseClass" yazarak inheritance ettiğimiz için Message(); kullanabildik.
        }

    }

    static class Teacher				-->> static nesneler ortak nesnelerdir herkes onu kullanabilir.
    {
        public static int Number { get; set; }
    }

    static class Utilities
    {
        public static void Validate()
        {
            Console.WriteLine("Validate is done");
        }
    }

class Manager
    {
        public static void DoSomething()
        {
            Console.WriteLine("Done");
        }

        public void DoSomething2()
        {
            Console.WriteLine("Done 2");
        }
    }
static void Main(string[] args)
        {
            Utilities utilities = new Utilities();
            List<string> result = utilities.BuildList<string>("Ankara", "İzmir", "Adana");
            foreach (var item in result)
            {
                Console.WriteLine(item);
            }
            List<Customer> result2 = utilities.BuildList<Customer>(new Customer {FirstName ="Yusuf" }, new Customer {FirstName ="Şafak" });

            foreach (var customer in result2)
            {
                Console.WriteLine(customer.FirstName);
            }

            Console.ReadLine();
        }

 class Utilities
    {
        public List<T> BuildList<T>(params T[] items)
        {
            return new List<T>(items);
        }
    }

class Product
    {

    }
    interface IProductDal :IRepository<Product>
    {

    }
    class Customer
    {

    }
    interface ICustomerDal :IRepository<Customer>
    {
        
    }
    interface IRepository<T>
    {
        List<T> GetAll();
        T Get(int id);
        void Add(T entity);
        void Delete(T entity);
        void Update(T entity);
    }
    class ProductDal : IProductDal			-->> :IProductDal atamamızdaki neden=  Çünkü müşteriye özel bir şey yaparken ona özel olsun ürüne özel bir şey yaparken ona 
    {
        public void Add(Product entity)
        {
            throw new NotImplementedException();
        }

        public void Delete(Product entity)
        {
            throw new NotImplementedException();
        }

        public Product Get(int id)
        {
            throw new NotImplementedException();
        }

        public List<Product> GetAll()
        {
            throw new NotImplementedException();
        }

        public void Update(Product entity)
        {
            throw new NotImplementedException();
        }
    }
    class CustomerDal : ICustomerDal
    {
        public void Add(Customer entity)
        {
            throw new NotImplementedException();
        }

        public void Delete(Customer entity)
        {
            throw new NotImplementedException();
        }

        public Customer Get(int id)
        {
            throw new NotImplementedException();
        }

        public List<Customer> GetAll()
        {
            throw new NotImplementedException();
        }

        public void Update(Customer entity)
        {
            throw new NotImplementedException();
        }
    }

----------------- KISITLAR -----------------

interface IStudentDal:IRepository<Student>		-->> <> içine yazılan referans tip olmak zorunda
    {						-->> string veya int vb. yazmayı kısıtladık..

    }
    class Student
    {

    }
    interface IRepository<T> where T:class, new()		-->> bu kod ile yukarıdaki <Student> yerine yazılan kelime referans tip olmalı fakat aynı zamanda new lenebilir olmalı..(kod okunuşu)
    {

**-- <> içine "CustomerDal" - "ProductDal" vb. yazılmasınıda uygun bulmuyorum ve kısıtlamak istiyorum onun içinde;

class Student:IEntity			-->> tüm classları :IEntity yazarak İnherite ettik
    {

    }
    interface IEntity			-->> oluşturduk
    {

    }

interface IRepository<T> where T : class, IEntity, new()		-->> T = referans tipi olmalı(class yazarak), IEntity ile inherite edilmeli( IEntity yazarak) fakat new lenebilir olmalı..(kod okunuşu.)
    {

***---> Sadece değer tipi yazdırmak istersekte 

interface IRepository<T> where T:struct		-->> struct : değer tiplerine karşılık gelir..
    {

